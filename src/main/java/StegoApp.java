import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.nio.file.FileSystems;
import java.nio.file.Path;
import java.util.Random;

import javax.imageio.ImageIO;
import javax.media.jai.Histogram;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.ScrollPaneConstants;

import java.awt.*;

import com.google.zxing.WriterException;
import com.google.zxing.client.j2se.MatrixToImageWriter;


/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class StegoApp extends JFrame {
		
	public static BufferedImage testImage, coverImage, qrCode,
								oneBitStegoImage, threeBitStegoImage, fiveBitStegoImage,
								qrCodeOneBit, qrCodeThreeBit, qrCodeFiveBit,
								oneBitDifference, threeBitDifference, fiveBitDifference,
								oneNStegoImage, twoNStegoImage, threeNStegoImage,
								qrCodeOneN, qrCodeTwoN, qrCodeThreeN,
								oneNDifference, twoNDifference, threeNDifference,
								oneBitOPAPStegoImage, threeBitOPAPStegoImage, fiveBitOPAPStegoImage,
								qrCodeOneBitOPAP, qrCodeThreeBitOPAP, qrCodeFiveBitOPAP,
								oneBitOPAPDifference, threeBitOPAPDifference, fiveBitOPAPDifference;
	


	public static void main(String[] args) {
        try {
           coverImage = ImageIO.read(new File("assets/18.pgm"));
           testImage = ImageIO.read(new File("assets/10.pgm"));
        		
	        // Create stego image
	        EMD testingStego = new EMD(coverImage, 3, "Testing message bleep bloop", 35, 35);
			testingStego.embed();
			LSB testingLSB = new LSB(coverImage, 3, "Testing message bleep bloop", 512, 512);
			testingLSB.embed();
			
			OPAP testOPAP = new OPAP(coverImage, 3, "Testing message bleep bloop", 512, 512);
			testOPAP.embed();
			
			System.out.println("EMD PSNR: " + Helper.psnr(testingStego.getCoverImage(), testingStego.getStegoImage()));
			System.out.println("LSB PSNR: " + Helper.psnr(testingLSB.getCoverImage(), testingLSB.getStegoImage()));
			System.out.println("OPAP PSNR: " + Helper.psnr(testOPAP.getCoverImage(), testOPAP.getStegoImage()));
			
			// Save qrcode before image
			Path path = FileSystems.getDefault().getPath("OUTPUT/qrCodeBefore.png");
	        MatrixToImageWriter.writeToPath(testOPAP.getPayload(), "PNG", path);
	        	        
	        qrCode = MatrixToImageWriter.toBufferedImage(testOPAP.extract());
			
			// Save QR code after
			File qrfileafter = new File("OUTPUT/qrCodeAfter.png");
			ImageIO.write(qrCode, "png", qrfileafter);
            
			// Decode QR code and output message
            String decodedText = Payload.decodeQRCode(qrCode);
            if(decodedText == null) {
                System.out.println("No QR Code found in the image");
            } else {
                System.out.println("Decoded text = " + decodedText);
            }
			
			// Save stego image
			File stegofile = new File("OUTPUT/stego.png");
			ImageIO.write(testingStego.getStegoImage(), "png", stegofile);
			
			File coverfile = new File("OUTPUT/cover.png");
			ImageIO.write(coverImage, "png", coverfile);
			
        } catch (IOException e) {
            System.out.println("Could not generate QR Code or load image, IOException :: " + e.getMessage());
        }
        
		new StegoApp("StegoCompare");

    } // end main
	
	public StegoApp(String title) {
		super(title);
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		
		UI mainPanel = new UI(null);
		this.add(mainPanel);
		this.pack();
		this.setLocationRelativeTo(null);
		this.setVisible(true);		
	}
	
	public static BufferedImage getNewImage() throws IOException {
		BufferedImage newImage;
		int random = new Random().nextInt(19) + 1;
		newImage = ImageIO.read(new File("assets/" + random + ".pgm"));
		return newImage;	
	}
	


	
}
